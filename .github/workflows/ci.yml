name: CI
on:
  push:
  pull_request:
    # Only run for trusted events to save Actions minutes
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Check if we need to run full CI or just docs validation
  changes:
    runs-on: ubuntu-latest
    outputs:
      docs-only: ${{ steps.changes.outputs.docs-only }}
      tests-only: ${{ steps.changes.outputs.tests-only }}
      tooling-only: ${{ steps.changes.outputs.tooling-only }}
      has-code: ${{ steps.changes.outputs.has-code }}
      has-non-test-code: ${{ steps.changes.outputs.has-non-test-code }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            docs-only:
              - '**.md'
              - 'docs/**'
              - '.github/workflows/**.yml'
              - 'CONTRIBUTING.md'
              - 'CHANGELOG.md'
              - 'LICENSE'
            tests-only:
              - 'src/test/**'
              - '**/*.test.ts'
              - 'vitest.config.ts'
            has-non-test-code:
              - 'src/**'
              - '!src/test/**'
              - '!**/*.test.ts'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - 'vitest.config.ts'
              - 'eslint.config.js'
            tooling-only:
              - '.husky/**'
              - '.gitignore'
              - '.npmignore'
              - '.releaserc.json'
              - '.prettierrc*'
              - '.commitlintrc*'
              - '.env*'
              - '.vscode/**'
              - 'eslint.config.js'
              - 'prettier.config.*'
              - '.editorconfig'
              - 'commitlint.config.*'
              - '*.log'
            has-code:
              - 'src/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - 'vitest.config.ts'
              - 'eslint.config.js'

  # ============================================================================
  # STAGE 1: Quick validation (runs in parallel, fails fast)
  # ============================================================================

  lint:
    name: 'Quick Check: Lint'
    needs: changes
    runs-on: ubuntu-latest
    if: (github.event.pull_request.draft != true || github.event_name == 'push') && needs.changes.outputs.has-code == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - run: npm run lint

  typecheck:
    name: 'Quick Check: TypeScript'
    needs: changes
    runs-on: ubuntu-latest
    if: (github.event.pull_request.draft != true || github.event_name == 'push') && needs.changes.outputs.has-code == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - run: npx tsc --noEmit --incremental false

  # ============================================================================
  # STAGE 2: Core testing (only runs if Stage 1 passes)
  # Integration tests run ONLY here for efficiency - no need to repeat across matrix
  # ============================================================================

  test-primary:
    name: 'Core Tests: Ubuntu + Node 20'
    needs: [changes, lint, typecheck]
    runs-on: ubuntu-latest
    if: (github.event.pull_request.draft != true || github.event_name == 'push') && needs.changes.outputs.has-code == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - run: npm run test:ci:coverage
      - name: Upload primary coverage
        uses: codecov/codecov-action@v5
        with:
          flags: primary,ubuntu,node20
          name: ubuntu-node20
        if: always()

  build-primary:
    name: 'Core Build: Verify Build'
    needs: [changes, lint, typecheck]
    runs-on: ubuntu-latest
    if: (github.event.pull_request.draft != true || github.event_name == 'push') && needs.changes.outputs.has-code == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - run: npm run build

  # ============================================================================
  # STAGE 3: Extended validation (only runs if Stage 2 passes)
  # Unit tests only - integration already validated in Stage 2
  # ============================================================================

  test-matrix:
    name: 'Extended: ${{ matrix.os }} + Node ${{ matrix.node }}'
    needs: [changes, test-primary, build-primary]
    runs-on: ${{ matrix.os }}
    if: (github.event.pull_request.draft != true || github.event_name == 'push') && needs.changes.outputs.has-non-test-code == 'true'
    strategy:
      fail-fast: false
      matrix:
        # Skip Ubuntu + Node 20 since we already tested it in Stage 2
        include:
          - os: ubuntu-latest
            node: 22
          - os: windows-latest
            node: 20
          - os: macos-latest # Intel Mac
            node: 20
          - os: macos-14 # Apple Silicon
            node: 20
          - os: macos-14 # Apple Silicon
            node: 22
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
      - run: npm ci
      - run: npm run test:unit
      - name: Upload matrix coverage
        uses: codecov/codecov-action@v5
        with:
          flags: extended,${{ matrix.os }},node${{ matrix.node }}
          name: ${{ matrix.os }}-node${{ matrix.node }}
        if: always()
      - run: npm run build

  # ============================================================================
  # TESTS-ONLY: Lightweight validation for test-only changes
  # ============================================================================

  tests-check:
    name: 'Tests: Validation'
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.tests-only == 'true' && needs.changes.outputs.has-non-test-code != 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - name: Run tests with coverage
        run: npm run test:ci:coverage
      - name: Upload test-only coverage
        uses: codecov/codecov-action@v5
        with:
          flags: tests-only,ubuntu,node20
          name: tests-only-ubuntu-node20
        if: always()
      - name: Validate tests summary
        run: |
          echo "✅ Test-only changes detected"
          echo "Skipping extended CI suite for test-only changes"
          echo "📊 Running essential validation: tests + coverage"

  # ============================================================================
  # TOOLING-ONLY: Lightweight validation for tooling changes
  # ============================================================================

  tooling-check:
    name: 'Tooling: Validation'
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.tooling-only == 'true' && needs.changes.outputs.has-code == 'false'
    steps:
      - uses: actions/checkout@v4
      - name: Validate tooling changes
        run: |
          echo "✅ Tooling changes detected (.husky, config files, etc.)"
          echo "Skipping full CI suite for tooling-only changes"

  # ============================================================================
  # DOCS-ONLY: Lightweight validation for documentation changes
  # ============================================================================

  docs-check:
    name: 'Docs: Validation'
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.docs-only == 'true' && needs.changes.outputs.has-code == 'false'
    steps:
      - uses: actions/checkout@v4
      - name: Validate Markdown files
        run: |
          echo "✅ Documentation changes detected"
          echo "Skipping full CI suite for docs-only changes"

  # ============================================================================
  # COVERAGE: Aggregate coverage from all platforms
  # ============================================================================

  coverage-summary:
    name: 'Coverage: Summary'
    needs: [changes, test-primary, test-matrix]
    runs-on: ubuntu-latest
    if: (github.event.pull_request.draft != true || github.event_name == 'push') && needs.changes.outputs.has-non-test-code == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
        continue-on-error: true
      - name: Display coverage summary
        run: |
          echo "📊 Coverage Summary:"
          echo "- Primary (Ubuntu + Node 20): Uploaded to Codecov with 'primary' flag"
          echo "- Extended (Cross-platform): Uploaded to Codecov with 'extended' flag"
          echo "- View detailed reports at: https://codecov.io/gh/${{ github.repository }}"
          echo ""
          echo "💡 Codecov will merge coverage from all platforms automatically"

  # ============================================================================
  # FINAL STATUS: Summary job for branch protection rules
  # ============================================================================

  ci-success:
    name: 'CI Success'
    runs-on: ubuntu-latest
    needs:
      [
        changes,
        lint,
        typecheck,
        test-primary,
        build-primary,
        test-matrix,
        docs-check,
        tests-check,
        tooling-check,
        coverage-summary,
      ]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          # Check if this is a docs-only change
          if [[ "${{ needs.changes.outputs.docs-only }}" == "true" && "${{ needs.changes.outputs.has-code }}" == "false" ]]; then
            echo "✅ Docs-only change - docs-check must pass"
            if [[ "${{ needs.docs-check.result }}" != "success" ]]; then
              echo "❌ Docs check failed"
              exit 1
            fi
          # Check if this is a tests-only change
          elif [[ "${{ needs.changes.outputs.tests-only }}" == "true" && "${{ needs.changes.outputs.has-non-test-code }}" != "true" ]]; then
            echo "✅ Tests-only change - tests-check must pass"
            if [[ "${{ needs.tests-check.result }}" != "success" ]]; then
              echo "❌ Tests check failed"
              exit 1
            fi
          else
            echo "✅ Code change - all stages must pass"
            # Stage 1: Quick checks
            if [[ "${{ needs.lint.result }}" != "success" || "${{ needs.typecheck.result }}" != "success" ]]; then
              echo "❌ Stage 1 (Quick checks) failed"
              exit 1
            fi
            # Stage 2: Core testing  
            if [[ "${{ needs.test-primary.result }}" != "success" || "${{ needs.build-primary.result }}" != "success" ]]; then
              echo "❌ Stage 2 (Core testing) failed"
              exit 1
            fi
            # Stage 3: Extended validation
            if [[ "${{ needs.test-matrix.result }}" != "success" ]]; then
              echo "❌ Stage 3 (Extended validation) failed"
              exit 1
            fi
            # Coverage summary (informational)
            if [[ "${{ needs.coverage-summary.result }}" == "success" ]]; then
              echo "📊 Coverage reports successfully aggregated"
            fi
          fi
          echo "🎉 All required checks passed!"
